
function Path() {

    this.ptdirs = []; // array of positions and dir, x,y,dir
    this.pathSegments = []; // subarrays (by refs) of the above, collected in order 
    
    var getGCodeMoveTo = function(pt, zVal) {
            
        // paths are in mm (or pixels?)
        // convert to inches
        var conX = pt.x/25.4;
        var conY = pt.y/25.4;
        
        conX = conX.toFixed(5);
        conY = conY.toFixed(5);
        
        dataStr = "X" + conX.toString() + " Y" + conY.toString() + " Z" + zVal.toString();
        
        return dataStr;
    }
    
    this.generateGCode = function() {
        var gCode = "data:text/csv;charset=utf-8,";
        
        // todo: comment string 
        // (Box generated by.. <ApplicationName> on <Date>)
        // (dims)
        // (material)
        // (toolbit)
        gCode += "(ToDo, add information about what, how, when, and who made this file)\n\n";
        
        // initialization
        gCode += "G17 (set XY Plane)\nG20 (inches)\nG90(absolute programming)\nG94 (feedrate per minute)\n";
        gCode += "G0 Z1.0(seek to z = 1)\n"; 
        
        var dataStr, jogSt;
        var cutHeight = .1;
        var jogHeight = .9;
        
        this.pathSegments.forEach(function(pathSeg, iSeg) {
            
            gCode += "G0 Z" + jogHeight.toString() + "\n"; // pull up to ceiling
            jogSt = pathSeg.ptdirs[0];
            dataStr = getGCodeMoveTo(jogSt, jogHeight);
            gCode += dataStr + "\n";
            
            pathSeg.ptdirs.forEach(function(ptDir, iPtDir) {
            
                dataStr = getGCodeMoveTo(ptDir, cutHeight);
                gCode += dataStr + "\n";
            });
        });
        var encodedUri = encodeURI(gCode);
        var link = document.createElement("a");
        link.setAttribute("href", encodedUri);
        link.setAttribute("download", "pathFile.gcode");
        
        link.click();
    }
    
    this.drawSegments = function(canvas) {
        
        var i;
        for (i=0; i < this.pathSegments.length; ++i) {
            this.pathSegments[i].draw(canvas);
        }
    }
    
    this.draw = function(canvas) {
    
        var i, iPtDir;
        var ctx = canvas.getContext('2d');
        
        ctx.beginPath(); // todo, what's this do again? only for stroke?
        
        for (i=0; i < this.ptdirs.length; ++i) {
            
            iPtDir = this.ptdirs[i];
            ctx.rect(iPtDir.x, iPtDir.y, 1, 1);            
        }
        
        ctx.fill();
        
    }
}
